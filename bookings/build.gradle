buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE')
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.19.2')
    }
}

apply plugin: "java"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.palantir.docker"

group = "paulturner"

bootJar {
    baseName = 'bookings'
    version = '1.0.0'
}

docker {
    dependsOn build
    name "${project.group}/${bootJar.baseName}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/palantir/releases"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("com.google.guava:guava:25.0-jre")
    compile("io.springfox:springfox-swagger2:2.3.0")
    compile("io.springfox:springfox-swagger-ui:2.3.0")

    compileOnly("org.projectlombok:lombok:1.16.16")

    compile project(":hotelrefdata-api")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("com.palantir.docker.compose:docker-compose-rule-junit4:0.32.0")
    testCompile("org.awaitility:awaitility:3.1.0")

}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            java.srcDir file('src/integration-test/java')
            resources.srcDir('src/integration-test/resources')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}